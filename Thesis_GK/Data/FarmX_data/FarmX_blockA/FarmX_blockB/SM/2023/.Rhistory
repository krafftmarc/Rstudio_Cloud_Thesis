response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
url <- "https://map.farmx.co/api/sensors/data/?sensorType=water_pressure&sensorIdentifier=a7:0a:cb:52:d9:9c&variables=water_pressure&startDate=2022-07-01T00:00:53.826Z&endDate=2022-07-30T23:59:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
url <- "https://map.farmx.co/api/sensors/data/?sensorType= pixl_soil&sensorIdentifier=37:e2:43:47:2e:18:a8:f1&variables=soil_moisture_6&startDate=2022-07-01T00:00:53.826Z&endDate=2022-07-30T23:59:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
url <- "https://map.farmx.co/api/sensors/data/?sensorType= pixl_soil&sensorIdentifier=37:e2:43:47:2e:18:a8:f1&variables=soil_moisture_6&startDate=2022-07-01T00:00:53.826Z&endDate=2022-07-30T23:59:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
url <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:1
8:55:36&variables=soil_moisture_6&startDate=2022-07-01T21:06:53.826Z&endDate=2022-07-30T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
url <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:18:55:36&variables=soil_moisture_6&startDate=2022-07-01T21:06:53.826Z&endDate=2022-07-30T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
cap_psi <- "https://map.farmx.co/api/sensors/capabilities/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:18:55:36"
response_cap <- GET(cap_psi, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
response_cap
url <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:18:55:36&variables=soil_temp_6&startDate=2022-07-01T21:06:53.826Z&endDate=2022-07-30T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response_cap <- GET(cap_psi, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
response_cap <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
response_cap <- GET(cap_psi, add_headers(headers))
data <- fromJSON(content(response_cap, "text"))
print(data)
url <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:18:55:36&variables=soil_temp_6&startDate=2022-07-01T21:06:53.826Z&endDate=2022-07-30T23:46:53.826Z"
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
cap_psi <- "https://map.farmx.co/api/sensors/capabilities/?sensorType=pixl_soil&sensorIdentifier=37:e3:43:47:2e:14:ed:13"
response_cap <- GET(cap_psi, add_headers(headers))
data <- fromJSON(content(response_cap, "text"))
print(data)
url <- "https://map.farmx.co/api/sensors/data/?sensorType=water_pressure&sensorIdentifier=27:0a:ab:8f:d9:9c&variables=water_pressure&startDate=2022-09-19T21:06:53.826Z&endDate=2022-09-21T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
response$headers$allow
table <- flatten(fromJSON(data))
data <- fromJSON(content(response))
url <- "https://map.farmx.co/api/sensors/data/?sensorType=water_pressure&sensorIdentifier=27:0a:ab:8f:d9:9c&variables=water_pressure&startDate=2022-09-19T21:06:53.826Z&endDate=2022-09-21T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
table <- flatten(fromJSON(response))
table <- flatten(fromJSON(url))
table <- flatten(fromJSON(url,headers))
url <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:18:55:36&variables=temperature_1&startDate=2022-10-09T21:06:53.826Z&endDate=2022-10-09T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
data <- fromJSON(flatten(response, "text"))
content
print(data)
url <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:ea:43:47:2e:18:55:36&variables=temperature_1&startDate=2022-04-01T21:06:53.826Z&endDate=2022-09-20T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response <- GET(url, add_headers(headers))
data <- fromJSON(content(response, "text"))
print(data)
write_csv(data,soiltemp.csv)
data <- fromJSON(content(response, "data"))
data <- fromJSON(content(response, "raw"))
data <- fromJSON(content(response, "parsed"))
data <- fromJSON(content(response, "text"))
write_csv(data,soiltemp.txt)
write_csv(data,soiltemp)
write_csv(data,file = "soiltemp.csv")
write_csv(data,file = "soiltemp.txt")
write_csv(data,file = "soiltemp")
writeChar(data,file = "soiltemp.txt")
write(data,file = "soiltemp.txt")
print(data)
write(data)
library(httr)
library(jsonlite)
url_sm372_6 <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:e3:43:47:2e:18:2d:a1&variables=soil_moisture_6&startDate=2023-05-12T21:06:53.826Z&endDate=2023-05-17T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response_sm372_6 <- GET(url_sm372_6, add_headers(headers))
data <- fromJSON(content(response_sm372_6, "text"))
print(data)
sm372_6 <- data$soil_moisture_6$data
df <- data.frame(sm372_6)
write.csv(df,"sm372_6_5_17.csv")
library(httr)
library(jsonlite)
sens <- "https://map.farmx.co/api/sensors/"
load("~/Desktop/Tyree_2023_WP.csv")
data <- read.csv("~/Desktop/Tyree_2023_WP.csv")
data$date <- as.Date(data$date, format = "%m-%d-%Y")
data$date
data <- read.csv("~/Desktop/Tyree_2023_WP.csv")
data$date <- as.Date(data$date)
data <- read.csv("~/Desktop/Tyree_2023_WP.csv")
data$date <- as.Date(data$date, format = "%m/%d/%Y")
data$date
date <- data$date
time <- data$time
tx <- data$Tx
var <- data$variety
pot_type <- data$leaf.stem
wp <- data$X_
df <- data.frame(date,pot_type,time,tx,var,wp)
library(ggplot2)
plot <- ggplot(df, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point(size = 3) + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var))) + facet_grid(time ~ var) + labs(title = "Tyree Water Potentials", x = "Date", y = "Water Potentials", color = "Tx", shape = "Stem/Leaf") + scale_color_manual(values = c("blue","red")) + scale_shape_manual(values = c("16","17")) + theme_minimal()
plot
plot <- ggplot(df, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var))) + facet_grid(time ~ var) + labs(title = "Tyree Water Potentials", x = "Date", y = "Water Potentials", color = "Tx", shape = "Stem/Leaf") + scale_color_manual(values = c("blue","red")) + scale_shape_manual(values = c("16","17")) + theme_minimal()
plot
plot <- ggplot(df, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
plot
data <- read.csv("~/Desktop/Tyree_2023_WP.csv")
data$date <- as.Date(data$date, format = "%m/%d/%Y")
data$date
date <- data$date
time <- data$time
tx <- data$Tx
var <- data$variety
pot_type <- data$leaf.stem
wp <- data$X_
df <- data.frame(date,pot_type,time,tx,var,wp)
library(ggplot2)
plot <- ggplot(df, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
plot
df_plot <-ggplot(df, aes(x = date, y = wp, group = time, var,pot_type, color = time)) + geom_line() + geom_smooth()
df_plot
df_plot <-ggplot(df, aes(x = date, y = wp, group = time, var,pot_type, color = tx)) + geom_line() + geom_smooth()
df_plot
df5AM <- df %>% filter(time == "500")
library(tidyverse)
df5AM <- df %>% filter(time == "500")
df_plot <-ggplot(df5AM, aes(x = date, y = wp, group = var, color = tx)) + geom_line() + geom_smooth()
df_plot
plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
plot
df1PM_leaf <- df %>% filter(time == "1300") %>% filter(pot_type == "Leaf")
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_leaf, aes(x = date, y = wp, group = var, color = tx)) + geom_line() + geom_smooth()
df_plot
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_leaf, aes(x = date, y = wp, group = var, color = tx)) + geom_point() + geom_smooth()
df_plot
df1PM_leaf_ch <- df %>% filter(time == "1300") %>% filter(pot_type == "Leaf") %>% filter(var == "CS")
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_leaf_ch, aes(x = date, y = wp, group = var, color = tx)) + geom_point() + geom_smooth()
df_plot
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_leaf_ch, aes(x = date, y = wp, group = tx, color = tx)) + geom_point() + geom_smooth()
df_plot
df1PM_leaf_cs <- df %>% filter(time == "1300") %>% filter(pot_type == "Leaf") %>% filter(var == "CS")
df1PM_leaf_ch <- df %>% filter(time == "1300") %>% filter(pot_type == "Leaf") %>% filter(var == "CH")
df1PM_stem_ch <- df %>% filter(time == "1300") %>% filter(pot_type == "Stem") %>% filter(var == "CS")
df1PM_stem_ch <- df %>% filter(time == "1300") %>% filter(pot_type == "Stem") %>% filter(var == "CH")
df1PM_stem_cs <- df %>% filter(time == "1300") %>% filter(pot_type == "Stem") %>% filter(var == "CS")
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_stem_cs, aes(x = date, y = wp, group = tx, color = tx)) + geom_point() + geom_smooth()
df_plot
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_stem_cs, aes(x = date, y = wp, group = tx, color = tx)) + geom_point() + geom_smooth() + labs(title = "1PM Stem WP CS")
df_plot
install.packages(corrplot)
install.packages("corrplot")
library(corrplot)
corr_matrix <- cor(df)
corr_matrix <- cor(df$wp)
corr_matrix <- cor(df$wp, df$date, df$pot_type, df$tx, df$var)
corr_matrix <- cor(df$wp, df$date, df$pot_type, df$tx)
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_stem_ch, aes(x = date, y = wp, group = tx, color = tx)) + geom_point() + geom_smooth() + labs(title = "1PM Stem WP CH")
df_plot
library(car)
model_stem_1pm_cs <- lm(wp ~ tx*date, data = df1PM_stem_cs)
anova_result <- Anova(model_stem_1pm_cs, type = "III")
anova_result
#plot <- ggplot(df5AM, aes(x = date, y = wp, color = tx, shape = pot_type)) + geom_point() + geom_smooth(method = "lm", se = FALSE,aes(group = interaction(time,var)))
#plot
df_plot <-ggplot(df1PM_leaf_cs, aes(x = date, y = wp, group = tx, color = tx)) + geom_point() + geom_smooth() + labs(title = "1PM Leaf WP CS")
df_plot
anova_1pm_stem_cs <-
model <- lm(wp ~ tx*var*date*pot_type*time, data = df)
anova_result <- Anova(model, type = "III")
ano
anova_result
anova_1pm_stem_cs <-
model <- lm(wp ~ tx*var*date*pot_type*time, data = df)
anova_result <- Anova(model, type = "III")
anova_1pm_stem_cs <-
model <- lm(wp ~ tx*var*pot_type*time, data = df)
anova_result <- Anova(model, type = "III")
anova_1pm_stem_cs <-
df_1pm < df %>% filter(time == "1300")
model_1pm <- lm(wp ~ tx*var*pot_type, data = df)
anova_result <- Anova(model_1pm, type = "III")
anova_1pm_stem_cs <-
df_1pm < df %>% filter(time == "1300")
anova_1pm_stem_cs <-
df_1pm <- df %>% filter(time == "1300")
model_1pm <- lm(wp ~ tx*var*pot_type, data = df_1pm)
anova_result <- Anova(model_1pm, type = "III")
model_1pm <- lm(df_1pm$wp ~ df_1pm$tx*df_1pm$var*df_1pm$pot_type, data = df_1pm)
anova_result <- Anova(model_1pm, type = "III")
#+ facet_grid(time ~ var) + labs(title = "Tyree Water Potentials", x = "Date", y = "Water Potentials", color = "Tx", shape = "Stem/Leaf") + scale_color_manual(values = c("blue","red")) + scale_shape_manual(values = c("16","17")) + theme_minimal()
#+
model <- lm(wp ~ tx*pot_type*var*time, data = df)
anova_result <- Anova(model, type = "III")
anova_result <- aov(model, type = "III")
corr <- cor(model_1pm)
corr
corr <- cor(df_1pm)
library(httr)
library(jsonlite)
sens <- "https://map.farmx.co/api/sensors/"
url_sm372_6 <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:e3:43:47:2e:18:2d:a1&variables=soil_moisture_6&startDate=2023-05-12T21:06:53.826Z&endDate=2023-05-17T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response_sm372_6 <- GET(url_sm372_6, add_headers(headers))
data <- fromJSON(content(response_sm372_6, "text"))
print(data)
sm372_6 <- data$soil_moisture_6$data
df <- data.frame(sm372_6)
df
load("~/Box Cloud/R/Version Control/farmx_data/farmx_data_GET.R")
library(httr)
library(jsonlite)
sens <- "https://map.farmx.co/api/sensors/"
sens <- "https://map.farmx.co/api/sensors/"
url_sm372_6 <- "https://map.farmx.co/api/sensors/data/?sensorType=pixl_soil&sensorIdentifier=37:e3:43:47:2e:18:2d:a1&variables=soil_moisture_6&startDate=2023-05-12T21:06:53.826Z&endDate=2023-05-17T23:46:53.826Z"
headers <- c('Authorization' = 'Token 36a2276cffb2014a1c4314ce27b7395920acd147')
response_sm372_6 <- GET(url_sm372_6, add_headers(headers))
load("~/Desktop/FarmX_macbook/FarmXDataExport (PR6-1B).csv")
library(tidyverse)
farmX <- read_csv("~/Desktop/FarmX_macbook/FarmXDataExport (PR6-1B).csv")
farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(your_data_column_to_average))
farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`))
farmX_avg <- farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`)) %>% unite(MDY, month, day, year, sep = "_", remove = FALSE)
farmX_avg <- farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`)) %>% unite(MDY, month, day, year, sep = "_", remove = FALSE) %>% write.csv(farmX_avg, "PR6_1B.csv", row.names = FALSE)
farmX_avg <- farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`)) %>% unite(MDY, month, day, year, sep = "_", remove = FALSE)
write.csv(farmX_avg, "PR6_1B.csv", row.names = FALSE)
# Set the folder path where you want to save the CSV file
folder_path <- "~/Desktop/FarmX_macbook/"
# Create the full file path including the file name
file_path <- file.path(folder_path, "PR6_1B_AVG.csv")
write.csv(farmX_avg, file_path, "PR6_1B.csv", row.names = FALSE)
farmX_avg <- farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`)) %>% unite(MDY, month, day, year, sep = "_", remove = FALSE)
# Set the folder path where you want to save the CSV file
folder_path <- "~/Desktop/FarmX_macbook/"
# Create the full file path including the file name
file_path <- file.path(folder_path, "PR6_1B_AVG.csv")
# Export the data frame to a CSV file
write.csv(farmX_avg, file_path, row.names = FALSE)
# Load the lubridate package for handling dates if not already loaded
# library(lubridate)
farmX$`Date (PST)`
farmX$`Date (PST)` <- mdy_hms(farmX$`Date (PST)`)
month <- month(farmX$`Date (PST)`)
month
farmX <- read_csv("~/Desktop/FarmX_macbook/FarmXDataExport (PR6-1B).csv")
df <- farmX$`Date (PST)` %>% mutate(date = format(farmX$`Date (PST)`, format = "%m-%d-%Y"))
# Assuming your data frame is named 'farmX'
farmX <- farmX %>% mutate(date = format(`Date (PST)`, format = "%m-%d-%Y"))
result <- df %>% group_by(date) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`))
result <- df %>% group_by(farmX$MDY) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`))
# Assuming 'farmX' already contains a column named 'date' with the date in "m-d-y" format
result <- farmX %>% group_by(date) %>% summarize(avg_result = mean(`Water Pressure (psi) - 57:0a:cb:52:da:9c`))
#farmX_avg <- farmX %>% mutate(month = month(farmX$`Date (PST)`), day = day(farmX$`Date (PST)`), year = year(farmX$`Date (PST)`)) %>% group_by(year, month, day) %>% summarize(avg_result = mean(farmX$`Water Pressure (psi) - 57:0a:cb:52:da:9c`)) %>% unite(MDY, month, day, year, sep = "_", remove = FALSE)
# Set the folder path where you want to save the CSV file
folder_path <- "~/Desktop/FarmX_macbook/"
# Create the full file path including the file name
file_path <- file.path(folder_path, "PR6_1B_AVG.csv")
# Export the data frame to a CSV file
write.csv(result, file_path, row.names = FALSE)
library(readr)
FarmXDataExport_PR6_1B_ <- read_csv("Desktop/FarmX_macbook/FarmXDataExport (PR6-1B).csv")
View(FarmXDataExport_PR6_1B_)
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
setwd("~Desktop/FarmX_macbook/")
file_list <- list.files(pattern = ".csv")
getwd()
setwd("Desktop/FarmX_macbook/")
file_list <- list.files(pattern = ".csv")
output_folder <- "Desktop/FarmX_macbook_avg/"
dir.create(output_folder, showWarnings = FALSE)
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
data <- data %>%
mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>%
mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Select every third column starting from the first data column
columns_to_average <- seq(4, ncol(data), by = 3)
# Calculate daily averages for the selected columns
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(all_of(columns_to_average), mean, na.rm = TRUE))
output_file <- file.path(output_folder, paste0("average_", file))
write_csv(daily_averages, output_file)
}
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
setwd("Desktop/FarmX_macbook/")
setwd("Desktop/FarmX_macbook/")
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
getwd()
setwd("Desktop/FarmX_macbook/")
setwd("Desktop/FarmX_macbook/")
setwd("~Desktop/FarmX_macbook/")
file_list <- list.files(pattern = ".csv")
output_folder <- "Desktop/FarmX_macbook_avg/"
dir.create(output_folder, showWarnings = FALSE)
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
data <- data %>%
mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>%
mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Select every third column starting from the first data column
columns_to_average <- seq(4, ncol(data), by = 3)
# Calculate daily averages for the selected columns
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(all_of(columns_to_average), mean, na.rm = TRUE))
output_file <- file.path(output_folder, paste0("average_", file))
write_csv(daily_averages, output_file)
}
library(dplyr)
library(readr)
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
setwd("~Desktop/FarmX_macbook/SM/2023/")
getwd()
setwd("/Desktop/FarmX_macbook/SM/2023/")
setwd("~/Desktop/FarmX_macbook/SM/2023/")
file_list <- list.files(pattern = ".csv")
output_folder <- "~/Desktop/FarmX_macbook_avg/"
dir.create(output_folder, showWarnings = FALSE)
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
data <- data %>%
mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>%
mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Select every third column starting from the first data column
columns_to_average <- seq(4, ncol(data), by = 3)
# Calculate daily averages for the selected columns
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(all_of(columns_to_average), mean, na.rm = TRUE))
output_file <- file.path(output_folder, paste0("average_", file))
write_csv(daily_averages, output_file)
}
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
data <- data %>%
mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>%
mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Select every third column starting from the first data column
columns_to_average <- seq(2, ncol(data), by = 3)
# Calculate daily averages for the selected columns
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(all_of(columns_to_average), mean, na.rm = TRUE))
output_file <- file.path(output_folder, paste0("average_", file))
write_csv(daily_averages, output_file)
}
# Select every third column starting from the first data column
columns_to_average <- seq(4, ncol(data), by = 3)
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
data <- data %>%
mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>%
mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Select every third column starting from the first data column
columns_to_average <- seq(4, ncol(data), by = 3)
# Calculate daily averages for the selected columns
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(all_of(columns_to_average), mean, na.rm = TRUE))
output_file <- file.path(output_folder, paste0("average_", file))
write_csv(daily_averages, output_file)
}
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
setwd("Desktop/FarmX_macbook/SM/2023/")
setwd("~/Desktop/FarmX_macbook/SM/2023/")
file_list <- list.files(pattern = ".csv")
output_folder <- "~/Desktop/FarmX_macbook_avg/"
dir.create(output_folder, showWarnings = FALSE)
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
data <- data %>%
mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>%
mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Determine the maximum column index for averaging
max_column_index <- min(ncol(data), 4 + (3 * (ncol(data) - 4) %/% 3))
# Select every third column starting from the first data column
columns_to_average <- seq(4, max_column_index, by = 3)
# Check if there are columns to average
if (length(columns_to_average) > 0) {
# Calculate daily averages for the selected columns
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(all_of(columns_to_average), mean, na.rm = TRUE))
output_file <- file.path(output_folder, paste0("average_", file))
write_csv(daily_averages, output_file)
}
}
library(dplyr)
library(readr)
library(lubridate)
library(purrr)
setwd("~/Desktop/FarmX_macbook/SM/2023/")
file_list <- list.files(pattern = ".csv")
output_folder <- "~/Desktop/FarmX_macbook_avg/"
# Create a folder to save the output files
dir.create(output_folder, showWarnings = FALSE)
for (file in file_list) {
data <- read_csv(file)  # Read the CSV file
# Convert the "Date (PST)" column to a datetime format
data <- data %>% mutate(`Date (PST)` = as.Date(`Date (PST)`, format = "%m/%d/%y")) %>% mutate(Year = year(`Date (PST)`), Month = month(`Date (PST)`), Day = day(`Date (PST)`))
# Calculate daily averages for each column
daily_averages <- data %>%
group_by(Year, Month, Day) %>%
summarise(across(everything(), mean, na.rm = TRUE))
# Create a new file name for the output
output_file <- file.path(output_folder, paste0("average_", file))
# Export the daily averages to a new CSV file
write_csv(daily_averages, output_file)
}
library(readr)
library(dplyr)
# Set the source folder and destination folder paths
source_folder <- "~/Desktop/FarmX_macbook_avg/"
destination_folder <- "~/Desktop/FarmX_macbook_extracted/"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all CSV files in the source folder
csv_files <- list.files(path = source_folder, pattern = ".csv", full.names = TRUE)
# Function to extract the desired columns
extract_columns <- function(file) {
data <- read_csv(file)
# Extract the first four columns and every third column
selected_columns <- c(1:4, seq(7, ncol(data), by = 3))
extracted_data <- data[, selected_columns]
return(extracted_data)
}
# Process each CSV file and save the extracted data to the destination folder
for (file in csv_files) {
extracted_data <- extract_columns(file)
destination_file <- file.path(destination_folder, basename(file))
write_csv(extracted_data, destination_file)
}
library(readr)
library(dplyr)
# Set the source folder and destination folder paths
source_folder <- "~/Desktop/FarmX_macbook_avg/"
destination_folder <- "~/Desktop/FarmX_macbook_extracted/"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all CSV files in the source folder
csv_files <- list.files(path = source_folder, pattern = ".csv", full.names = TRUE)
# Function to extract the desired columns
extract_columns <- function(file) {
data <- read_csv(file)
num_columns <- ncol(data)
if (num_columns >= 7) {
selected_columns <- c(1:4, seq(7, num_columns, by = 3))
extracted_data <- data[, selected_columns]
} else {
# Handle the case when there are not enough columns (e.g., use the first four columns)
extracted_data <- data[, 1:4]
}
return(extracted_data)
}
# Process each CSV file and save the extracted data to the destination folder
for (file in csv_files) {
extracted_data <- extract_columns(file)
destination_file <- file.path(destination_folder, basename(file))
write_csv(extracted_data, destination_file)
}
